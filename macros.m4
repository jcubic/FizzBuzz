define(`ZERO', `p => x => x')
define(`ONE', `p => x => p(x)')
define(`TWO', `p => x => p(p(x))')
define(`THREE', `p => x => p(p(p(x)))')
define(`FIVE', `p => x => p(p(p(p(p(x)))))')
define(`FIFTEEN', `p => x => p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(x)))))))))))))))')
define(`HUNDRED', `p => x => p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(p(x))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))')
define(`Z', `f => (x => f(p => x(x)(p)))(x => f(p => x(x)(p)))')
define(`TRUE', `x => y => x')
define(`FALSE', `x => y => y')
define(`IF', `b => b')
define(`IS_ZERO', `n => n(x => FALSE)(TRUE)')
define(`IS_LESS_OR_EQUAL', `m => n => IS_ZERO(SUBTRACT(m)(n))')
define(`INCREMENT', `n => p => x => p(n(p)(x))')
define(`DECREMENT', `n => f => x => n(g => h => h(g(f)))(y => x)(y => y)')
define(`ADD', `m => n => n(INCREMENT)(m)')
define(`SUBTRACT', `m => n => n(DECREMENT)(m)')
define(`MULTIPLY', `m => n => n(ADD(m))(ZERO)')
define(`DIV', `Z(f => m => n => IF(IS_LESS_OR_EQUAL(n)(m))(x => INCREMENT(f(SUBTRACT(m)(n))(n))(x))(ZERO))')
define(`POWER' `m => n => n(MULTIPLY(m))(ONE)')
define(`MOD', `Z(f => m => n => IF(IS_LESS_OR_EQUAL(n)(m)(x => f(SUBTRACT(m)(n))(n)(x)))(m))')
define(`PAIR', `x => y => f => f(x)(y)')
define(`LEFT', `p => p(x => y => x)')
define(`RIGHT', `p => p(x => y => y)')
define(`EMPTY', `PAIR(TRUE)(TRUE)')
define(`UNSHIFT', `l => x => PAIR(FALSE)(PAIR(x)(l))')
define(`IS_EMPTY', `LEFT')
define(`FIRST', `l => LEFT(RIGHT(l))')
define(`REST', `l => RIGHT(RIGHT(l))')
define(`RANGE', `Z(f => m => n => IF(IS_LESS_OR_EQUAL(m)(n))(x => UNSHIFT(f(INCREMENT(m))(n))(m)(x))(EMPTY))')
define(`FOLD', `Z(f => l => x => g => IF(IS_EMPTY(l))(x)(y => g(f(REST(l))(x)(g))(FIRST(l))(y)))')
define(`MAP', `k => f => FOLD(k)(EMPTY)(l => x => UNSHIFT(l)(f(x)))')
define(`PUSH', `l => x => FOLD(l)(UNSHIFT(EMPTY)(x))(UNSHIFT)')
define(`TEN', `MULTIPLY(TWO)(FIVE)')
define(`B', `TEN')
define(`F', `INCREMENT(B)')
define(`I', `INCREMENT(F)')
define(`U', `INCREMENT(I)')
define(`ZED', `INCREMENT(U)')
define(`FIZZ', `UNSHIFT(UNSHIFT(UNSHIFT(UNSHIFT(EMPTY)(ZED))(ZED))(I))(F)')
define(`BUZZ', `UNSHIFT(UNSHIFT(UNSHIFT(UNSHIFT(EMPTY)(ZED))(ZED))(U))(B)')
define(`FIZZBUZZ', `UNSHIFT(UNSHIFT(UNSHIFT(UNSHIFT(BUZZ)(ZED))(ZED))(I))(F)')
define(`TO_DIGITS', `Z(f => n => PUSH(IF(IS_LESS_OR_EQUAL(n)(DECREMENT(TEN)))(EMPTY)( x => f(DIV(n)(TEN))(x)))((MOD(n)(TEN))))')
module.exports = MAP(RANGE(ONE)(HUNDRED))( n => IF(IS_ZERO(MOD(n)(FIFTEEN)))(
    FIZZBUZZ
)(IF(IS_ZERO(MOD(n)(THREE)))(
    FIZZ
)(IF(IS_ZERO(MOD(n)(FIVE)))(
    BUZZ
)(
    TO_DIGITS(n)
))));
